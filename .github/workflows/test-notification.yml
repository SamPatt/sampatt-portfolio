name: Test Subscriber Notification

# This workflow can be manually triggered
on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Test file path'
        required: true
        default: 'test/test-blog-post.md'
        type: string

jobs:
  test-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install marked
        run: npm install marked

      - name: Create test blog post
        run: |
          mkdir -p test
          cat > test/test-blog-post.md << EOF
          ---
          title: Test Blog Post
          date: '2025-02-11'
          description: This is a test post for the notification system
          ---

          # Testing Markdown Rendering

          This is a test blog post to verify the notification system.

          ## Key Features Being Tested
          - Markdown rendering in preview
          - Proper from name in email
          EOF

      - name: Create Test Campaign
        env:
          LISTMONK_URL: ${{ secrets.LISTMONK_URL }}
          LISTMONK_USERNAME: ${{ secrets.LISTMONK_USERNAME }}
          LISTMONK_API_KEY: ${{ secrets.LISTMONK_API_KEY }}
          TEST_FILE: ${{ inputs.test_file }}
        run: |
          # Read the file content
          content=$(cat "$TEST_FILE")
          
          # Extract title and description from frontmatter
          title=$(echo "$content" | sed -n '/^title:/s/^title: *//p')
          description=$(echo "$content" | sed -n '/^description:/s/^description: *//p')
          
          # Get preview content
          preview_content=$(echo "$content" | awk '/^---$/{n++;next} n==2{p=p ORS $0} END{print p}' | head -n 3)
          
          # Render markdown and escape newlines
          preview=$(echo "$preview_content" | node -e "
            const marked = require('marked');
            let content = '';
            process.stdin.on('data', data => content += data);
            process.stdin.on('end', () => {
              const rendered = marked.parse(content);
              console.log(rendered.replace(/\"/g, '\\\\\\"').replace(/\n/g, ' '));
            });
          ")
          
          # Get slug from filename
          slug=$(basename "$TEST_FILE" .md)
          
          # Create campaign JSON
          json="{
            \"name\": \"[TEST] New Post: $title\",
            \"subject\": \"[TEST] New Blog Post: $title\",
            \"lists\": [1],
            \"from_email\": \"Sam Patterson <newsletter@sampatt.com>\",
            \"type\": \"regular\",
            \"content_type\": \"richtext\",
              \"body\": \"<h1>$title</h1><p>$description</p><p>$preview</p><p><a href=\\\"https://sampatt.com/blog/$slug\\\">Read more &rarr;</a></p>\",
            \"status\": \"draft\"
          }"
          
          # Get available lists
          echo "Fetching available lists..."
          lists_response=$(curl -s -X GET \
            -u "$LISTMONK_USERNAME:$LISTMONK_API_KEY" \
            -H "Content-Type: application/json" \
            "$LISTMONK_URL/api/lists")
          echo "Lists response: $lists_response"

          # Get the first list ID
          list_id=$(echo "$lists_response" | grep -o '"id":[0-9]*' | head -n1 | cut -d':' -f2)
          echo "Using list ID: $list_id"

          # Update JSON with correct list ID
          json="{
            \"name\": \"[TEST] New Post: $title\",
            \"subject\": \"[TEST] New Blog Post: $title\",
            \"lists\": [$list_id],
            \"from_email\": \"Sam Patterson <newsletter@sampatt.com>\",
            \"type\": \"regular\",
            \"content_type\": \"richtext\",
            \"body\": \"<h1>$title</h1><p>$description</p><p>$preview</p><p><a href=\\\"https://sampatt.com/blog/$slug\\\">Read more â†’</a></p>\",
            \"status\": \"draft\"
          }"

          # Create campaign
          echo "Creating campaign..."
          response=$(curl -s -X POST \
            -u "$LISTMONK_USERNAME:$LISTMONK_API_KEY" \
            -H "Content-Type: application/json" \
            "$LISTMONK_URL/api/campaigns" \
            -d "$json")
          echo "Campaign creation response: $response"
          
          # Extract campaign ID and check for errors
          if [[ $response == *"\"data\""* ]]; then
            campaign_id=$(echo "$response" | grep -o '"id":[0-9]*' | head -n1 | cut -d':' -f2)
            echo "Campaign created with ID: $campaign_id"
            
            # Start campaign
            echo "Starting campaign..."
            start_response=$(curl -s -X PUT \
              -u "$LISTMONK_USERNAME:$LISTMONK_API_KEY" \
              -H "Content-Type: application/json" \
              "$LISTMONK_URL/api/campaigns/$campaign_id/status" \
              -d '{"status":"running"}')
            echo "Campaign start response: $start_response"
            
            echo "Created and started test campaign for: $title"
          else
            echo "Error creating campaign: $response"
            exit 1
          fi
